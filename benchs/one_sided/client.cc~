#include <gflags/gflags.h>

#include "rlib/core/lib.hh"
#include "rlib/tests/random.hh"
#include "../timer.hpp"

DEFINE_string(addr, "localhost:8888", "Server address to connect to.");
DEFINE_int64(use_nic_idx, 0, "Which NIC to create QP");
DEFINE_int64(reg_nic_name, 73, "The name to register an opened NIC at rctrl.");
DEFINE_int64(reg_mem_name, 73, "The name to register an MR at rctrl.");
DEFINE_uint64(address_space,1024 * 1024 * 1024L,"The random read/write space of the registered memory");

using namespace rdmaio;
using namespace rdmaio::rmem;
using namespace rdmaio::qp;

using namespace test;

int main(int argc, char **argv) {
  gflags::ParseCommandLineFlags(&argc, &argv, true);

  // 1. create a local QP to use
  auto nic =
      RNic::create(RNicInfo::query_dev_names().at(FLAGS_use_nic_idx)).value();
  auto qp = RC::create(nic, QPConfig()).value();

  // 2. create the pair QP at server using CM
  ConnectManager cm(FLAGS_addr);
  RDMA_LOG(2) << "start to connect to server: " << FLAGS_addr;
  auto wait_res = cm.wait_ready(1000000, 4);
  if (wait_res ==
      IOCode::Timeout) // wait 1 second for server to ready, retry 2 times
    RDMA_ASSERT(false) << "cm connect to server timeout " << wait_res.desc;

  u64 key = 0;
  auto qp_res = cm.cc_rc(73, qp, key, FLAGS_reg_nic_name, QPConfig());
  RDMA_ASSERT(qp_res == IOCode::Ok) << qp_res.desc;
  RDMA_LOG(4) << "client fetch QP authentical key: " << key;

  // 3. create the local MR for usage, and create the remote MR for usage
  auto local_mem = Arc<RMem>(new RMem(1024));
  auto local_mr = RegHandler::create(local_mem, nic).value();

  rmem::RegAttr remote_attr;
  auto fetch_res = cm.fetch_remote_mr(FLAGS_reg_mem_name, remote_attr);
  RDMA_ASSERT(fetch_res == IOCode::Ok) << fetch_res.desc;

  qp->bind_remote_mr(remote_attr);
  qp->bind_local_mr(local_mr->get_reg_attr().value());

  // the benchmark code

  u64 bench_ops = 1000;
  FastRandom rand(0xdeadbeaf);
  r2::Timer timer;

  RDMA_LOG(4) << "all done, start bench code!";

  u64 sum = 0;
  for (uint i = 0; i < bench_ops; ++i) {
    /*This is the example code usage of the fully created RCQP */
    u64 *test_buf = (u64 *)(local_mem->raw_ptr);
    *test_buf = 0;

    u64 remote_addr = rand.next() % FLAGS_address_space;

    auto res_s = qp->send_normal(
        {.op = IBV_WR_RDMA_READ,
         .flags = IBV_SEND_SIGNALED,
         .len = sizeof(u64),
         .wr_id = 0},
        {.local_addr = reinterpret_cast<RMem::raw_ptr_t>(test_buf),
         .remote_addr = remote_addr,
         .imm_data = 0});
    RDMA_ASSERT(res_s == IOCode::Ok);
    auto res_p = qp->wait_one_comp();
    RDMA_ASSERT(res_p == IOCode::Ok);

    //RDMA_LOG(4) << "fetch one value from server : 0x" << std::hex << *test_buf;
    sum += *test_buf;
  }
  RDMA_LOG(4) << "final check sum: " << sum;

  RDMA_LOG(4) << "total thpt: " << (double)bench_ops / timer.passed_msec() * 1000000 << " reqs/sec";

  /***********************************************************/

  // finally, some clean up, to delete my created QP at server
  auto del_res = cm.delete_remote_rc(73, key);
  RDMA_ASSERT(del_res == IOCode::Ok)
      << "delete remote QP error: " << del_res.desc;

  while(1) {
    sleep(1);
  }

  RDMA_LOG(4) << "client returns";

  return 0;
}
